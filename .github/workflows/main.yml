name: "CodeQL Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  codeql_analysis:
    name: Analyze Code with CodeQL
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: "python"  # Ajustá según tu proyecto

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif

      - name: Upload CodeQL results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: codeql-results.sarif

  codeql_create_engagement:
    name: Create engagement in DefectDojo - CodeQL
    needs: codeql_analysis
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_URL: "https://f94496e7df2e.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_PRODUCTID: "2"
      DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq coreutils

      - name: Set engagement dates
        run: |
          echo "TODAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "ENDDAY=$(date -d '+28 days' +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Create engagement in DefectDojo
        run: |
          ENGAGEMENTID=$(curl --fail --location --request POST "${DEFECTDOJO_URL}/api/v2/engagements/" \
          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
          --header "Content-Type: application/json" \
          --data-raw '{
            "tags": ["GitHub Actions"],
            "name": "CodeQL_#${{ github.run_id }}",
            "description": "${{ github.event.head_commit.message }}",
            "version": "${{ github.ref }}",
            "first_contacted": "'"$TODAY"'",
            "target_start": "'"$TODAY"'",
            "target_end": "'"$ENDDAY"'",
            "reason": "Automated engagement",
            "tracker": "https://github.com/${{ github.repository }}",
            "status": "'"${DEFECTDOJO_ENGAGEMENT_STATUS}"'",
            "engagement_type": "CI/CD",
            "build_id": "${{ github.run_id }}",
            "commit_hash": "${{ github.sha }}",
            "branch_tag": "${{ github.ref_name }}",
            "source_code_management_uri": "https://github.com/${{ github.repository }}",
            "product": '${DEFECTDOJO_PRODUCTID}'
          }' | jq -r '.id')
          echo "DEFECTDOJO_ENGAGEMENTID=${ENGAGEMENTID}" >> defectdojo.env

      - name: Upload defectdojo.env file
        uses: actions/upload-artifact@v4
        with:
          name: defectdojo-env
          path: defectdojo.env

  codeql_import_results:
    name: Publish CodeQL Scan in DefectDojo
    runs-on: ubuntu-latest
    needs: codeql_create_engagement
    env:
      DEFECTDOJO_URL: "https://f94496e7df2e.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_PRODUCT_NAME: "REPO2"
      DEFECTDOJO_SCAN_TEST_TYPE: "SARIF"
      DEFECTDOJO_SCAN_MINIMUM_SEVERITY: "Info"
      DEFECTDOJO_SCAN_ACTIVE: "true"
      DEFECTDOJO_SCAN_VERIFIED: "false"
      DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS: "true"
      DEFECTDOJO_SCAN_PUSH_TO_JIRA: "false"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download CodeQL results artifact
        uses: actions/download-artifact@v4
        with:
          name: codeql-results
          path: .

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Set scan date
        run: echo "TODAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Confirm SARIF file
        run: |
          echo "Contenido del workspace:"
          ls -la .
          echo "Buscando archivos .sarif:"
          find . -maxdepth 2 -type f -name "*.sarif" -print
          SARIF_FILE=$(find . -maxdepth 2 -type f -name "*.sarif" | head -n 1)
          if [ -z "$SARIF_FILE" ]; then
            echo "No se encontró ningún archivo .sarif"
            exit 1
          fi
          echo "Usaré: $SARIF_FILE"
          echo "SARIF_FILE=$SARIF_FILE" >> $GITHUB_ENV

      - name: Upload CodeQL Scan to DefectDojo
        run: |
          curl -sS -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
            -H "accept: application/json" \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Token ${DEFECTDOJO_TOKEN}" \
            -F "scan_date=${TODAY}" \
            -F "minimum_severity=${DEFECTDOJO_SCAN_MINIMUM_SEVERITY}" \
            -F "active=${DEFECTDOJO_SCAN_ACTIVE}" \
            -F "verified=${DEFECTDOJO_SCAN_VERIFIED}" \
            -F "scan_type=${DEFECTDOJO_SCAN_TEST_TYPE}" \
            -F "product_name=${DEFECTDOJO_PRODUCT_NAME}" \
            -F "file=@${SARIF_FILE};type=application/sarif+json" \
            -F "engagement_name=CodeQL_#${{ github.run_id }}" \
            -F "close_old_findings=${DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS}" \
            -F "push_to_jira=${DEFECTDOJO_SCAN_PUSH_TO_JIRA}" \
            -o dojo_import.json -w "\nHTTP %{http_code}\n"
          echo "=== Respuesta DefectDojo ==="
          cat dojo_import.json || true
