name: "CodeQL Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
#  schedule:
#    - cron: '0 3 * * 1'

jobs:
  codeql_analysis:
    name: Analyze Code with CodeQL
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: "python"  # Ajusta según tu proyecto

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif  # genera codeql-results.sarif en raíz

      - name: Upload CodeQL results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: codeql-results.sarif

  codeql_create_engagement:
    name: Create engagement in DefectDojo - CodeQL
    needs: codeql_analysis
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_URL: "https://0ff1a91be414.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_ENGAGEMENT_PERIOD: 28
      DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"
      DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
      DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "false"
      DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
      DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
      DEFECTDOJO_PRODUCTID: "1"
      # Hardcode para repo de prueba
      SQUAD: "SquadPrueba"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq coreutils

      - name: Set engagement dates
        run: |
          echo "TODAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "ENDDAY=$(date -d '+28 days' +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Create engagement in DefectDojo
        run: |
          ENGAGEMENTID=$(curl --fail --location --request POST "${DEFECTDOJO_URL}/api/v2/engagements/" \
          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
          --header "Content-Type: application/json" \
          --data-raw '{
            "tags": ["GitHub Actions", "squad='"${SQUAD}"'", "repo='${{ github.repository }}'"],
            "name": "CodeQL_#${{ github.run_id }}",
            "description": "${{ github.event.head_commit.message }}",
            "version": "${{ github.ref }}",
            "first_contacted": "'"$TODAY"'",
            "target_start": "'"$TODAY"'",
            "target_end": "'"$ENDDAY"'",
            "reason": "Automated engagement",
            "tracker": "https://github.com/${{ github.repository }}",
            "test_strategy": null,
            "threat_model": '${DEFECTDOJO_ENGAGEMENT_THREAT_MODEL}',
            "api_test": '${DEFECTDOJO_ENGAGEMENT_API_TEST}',
            "pen_test": '${DEFECTDOJO_ENGAGEMENT_PEN_TEST}',
            "check_list": '${DEFECTDOJO_ENGAGEMENT_CHECK_LIST}',
            "status": "'"${DEFECTDOJO_ENGAGEMENT_STATUS}"'",
            "engagement_type": "CI/CD",
            "build_id": "${{ github.run_id }}",
            "commit_hash": "${{ github.sha }}",
            "branch_tag": "${{ github.ref_name }}",
            "source_code_management_uri": "https://github.com/${{ github.repository }}",
            "deduplication_on_engagement": '${DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT}',
            "product": '"${DEFECTDOJO_PRODUCTID}"',
            "build_server": '${DEFECTDOJO_ENGAGEMENT_BUILD_SERVER}',
            "source_code_management_server": '${DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER}',
            "orchestration_engine": '${DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE}'
          }' | jq -r '.id')
          echo "DEFECTDOJO_ENGAGEMENTID=${ENGAGEMENTID}" >> defectdojo1.env

      - name: Upload defectdojo.env file
        uses: actions/upload-artifact@v4
        with:
          name: defectdojo1-env
          path: defectdojo1.env

  codeql_import_results:
    name: Publish CodeQL Scan in DefectDojo
    runs-on: ubuntu-latest
    needs: codeql_create_engagement
    env:
      DEFECTDOJO_URL: "https://0ff1a91be414.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_SCAN_MINIMUM_SEVERITY: "Info"
      DEFECTDOJO_SCAN_ACTIVE: "true"
      DEFECTDOJO_SCAN_VERIFIED: "false"
      DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS: "true"
      DEFECTDOJO_SCAN_PUSH_TO_JIRA: "false"
      DEFECTDOJO_SCAN_ENVIRONMENT: "Default"
      DEFECTDOJO_SCAN_TEST_TYPE: "SARIF"
      DEFECTDOJO_PRODUCT_TYPE: "Github Actions"
      DEFECTDOJO_PRODUCT_NAME: "Prueba Boreal"
      SQUAD: "SquadPrueba"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Set scan date
        run: echo "TODAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Download CodeQL results artifact
        uses: actions/download-artifact@v4
        with:
          name: codeql-results
          path: .

      - name: Verify SARIF file exists
        run: |
          ls -la .
          test -f codeql-results.sarif || (echo "No se encontró codeql-results.sarif" && exit 1)

      - name: Upload CodeQL Scan to DefectDojo
        run: |
          curl -sS -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
          -H "accept: application/json" \
          -H "Content-Type: multipart/form-data" \
          -H "Authorization: Token ${DEFECTDOJO_TOKEN}" \
          -F "scan_date=${TODAY}" \
          -F "minimum_severity=${DEFECTDOJO_SCAN_MINIMUM_SEVERITY}" \
          -F "active=${DEFECTDOJO_SCAN_ACTIVE}" \
          -F "verified=${DEFECTDOJO_SCAN_VERIFIED}" \
          -F "scan_type=${DEFECTDOJO_SCAN_TEST_TYPE}" \
          -F "product_name=${DEFECTDOJO_PRODUCT_NAME}" \
          -F "file=@codeql-results.sarif;type=application/sarif+json" \
          -F "engagement_name=CodeQL_#${{ github.run_id }}" \
          -F "close_old_findings=${DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS}" \
          -F "push_to_jira=${DEFECTDOJO_SCAN_PUSH_TO_JIRA}" \
          -F "tags=squad=${SQUAD},repo=${GITHUB_REPOSITORY}" \
          -F "findings_group=${SQUAD}" \
          -o dojo_response.json -w "\nHTTP %{http_code}\n"
          echo "=== Respuesta DefectDojo ==="
          cat dojo_response.json || true

  trivy_scan:
    name: Trivy Scan
    runs-on: ubuntu-20.04
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: docker build -t kali-standard .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'kali-standard'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: 0
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

  trivy_create_engagement:
    name: Create engagement in DefectDojo - Trivy
    needs: trivy_scan
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_URL: "https://0ff1a91be414.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_ENGAGEMENT_PERIOD: 28
      DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"
      DEFECTDOJO_PRODUCTID: "1"
      SQUAD: "SquadPrueba"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq coreutils

      - name: Set engagement dates
        run: |
          echo "TODAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "ENDDAY=$(date -d '+28 days' +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Create engagement in DefectDojo
        run: |
          ENGAGEMENTID=$(curl --fail --location --request POST "${DEFECTDOJO_URL}/api/v2/engagements/" \
          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
          --header "Content-Type: application/json" \
          --data-raw '{
            "tags": ["GitHub Actions", "squad='"${SQUAD}"'", "repo='${{ github.repository }}'"],
            "name": "Trivy_#${{ github.run_id }}",
            "description": "${{ github.event.head_commit.message }}",
            "version": "${{ github.ref }}",
            "first_contacted": "'"$TODAY"'",
            "target_start": "'"$TODAY"'",
            "target_end": "'"$ENDDAY"'",
            "reason": "Automated engagement",
            "tracker": "https://github.com/${{ github.repository }}",
            "status": "'"${DEFECTDOJO_ENGAGEMENT_STATUS}"'",
            "engagement_type": "CI/CD",
            "product": '"${DEFECTDOJO_PRODUCTID}"'
          }' | jq -r '.id')
          echo "DEFECTDOJO_ENGAGEMENTID=${ENGAGEMENTID}" >> defectdojo2.env

  trivy_import_results:
    name: Publish Trivy Scan in DefectDojo
    runs-on: ubuntu-latest
    needs: trivy_create_engagement
    env:
      DEFECTDOJO_URL: "https://0ff1a91be414.ngrok-free.app"
      DEFECTDOJO_TOKEN: "45989479827355dd9eaa6cfb7c0b2f7a86ffd5cb"
      DEFECTDOJO_PRODUCT_NAME: "Prueba Boreal"
      SQUAD: "SquadPrueba"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Download Trivy results artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-results
          path: .

      - name: Verify SARIF file exists
        run: |
          ls -la .
          test -f trivy-results.sarif || (echo "No se encontró trivy-results.sarif" && exit 1)

      - name: Upload Trivy Scan to DefectDojo
        run: |
          curl -sS -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
          -H "accept: application/json" \
          -H "Content-Type: multipart/form-data" \
          -H "Authorization: Token ${DEFECTDOJO_TOKEN}" \
          -F "scan_date=$(date +%Y-%m-%d)" \
          -F "scan_type=SARIF" \
          -F "product_name=${DEFECTDOJO_PRODUCT_NAME}" \
          -F "file=@trivy-results.sarif;type=application/sarif+json" \
          -F "engagement_name=Trivy_#${{ github.run_id }}" \
          -F "tags=squad=${SQUAD},repo=${GITHUB_REPOSITORY}" \
          -F "findings_group=${SQUAD}" \
          -o dojo_response.json -w "\nHTTP %{http_code}\n"
          echo "=== Respuesta DefectDojo ==="
          cat dojo_response.json || true
